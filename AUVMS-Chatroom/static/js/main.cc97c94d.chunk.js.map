{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","Chatroom","messagesRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","useState","msg","setMsg","sendMessage","e","a","preventDefault","currentUser","displayName","uid","photoURL","add","user","body","createdAt","FieldValue","serverTimestamp","map","m","ChatMessage","message","size","value","onChange","console","log","target","onKeyPress","charCode","trim","placeholder","onClick","props","rowSpan","width","src","alt","class","color","face","UserInfo","align","SignOut","signOut","SignIn","provider","GoogleAuthProvider","signInWithPopup","App","useAuthState","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc97c94d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useRef, useState } from 'react';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n// Doesn't work\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// const firebaseConfig = {\n// apiKey: process.env.REACT_APP_API_KEY,\n// authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n// projectId: process.env.REACT_APP_PROJECT_ID,\n// storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n// messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n// appId: process.env.REACT_APP_APP_ID,\n// measurementId: process.env.REACT_APP_MEASUREMENT_ID\n// };\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB0R2fgVYQT_FnCEiQaWqgT6rad_6yv9OU\",\n  authDomain: \"ac6218016.firebaseapp.com\",\n  projectId: \"ac6218016\",\n  storageBucket: \"ac6218016.appspot.com\",\n  messagingSenderId: \"397408209823\",\n  appId: \"1:397408209823:web:4949e121dd48be437d4baa\",\n  measurementId: \"G-KR7G4RX7DR\"\n};\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig)\n}\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth)\n\n  // if (user) {\n  //   //// then\n  // } else {\n  //   /// else \n  // }\n\n  // user ? then : else\n\n  return (\n    <div className=\"App\">\n      <h1 class=\"one\"><font face=\"Brush Script MT\">AUVMS Chatroom</font></h1>\n      {user ?\n        <div><UserInfo/><SignOut /><Chatroom />\n        <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\n        </div>\n        : <SignIn />}\n    </div>\n  );\n}\n\nfunction Chatroom() {\n  const messagesRef = firestore.collection('messages')\n  const query = messagesRef\n    .orderBy('createdAt', 'asc')\n    .limitToLast(5)\n  const [messages] = useCollectionData(query, { idField: 'id' })\n  const [msg, setMsg] = useState('')\n\n  // asynchronous function\n  const sendMessage = async (e) => {\n    e.preventDefault() // prevent unexpected input during this function execution\n\n    // const displayName = auth.currentUser.displayName\n    // const uid = auth.currentUser.uid\n    // const photoURL = auth.currentUser.photoURL\n    const { displayName, uid, photoURL } = auth.currentUser\n\n    await messagesRef.add({\n      user: displayName,\n      body: msg,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid: uid,\n      photoURL: photoURL\n    })\n\n    setMsg('')\n    // dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  const handleOnChange = (e) => {\n    console.log(e.target.value)\n    setMsg(e.target.value)\n  }\n\n  const handleKeyPress = (e) => {\n    if (e.charCode === 13) {\n      // console.log(\"Enter is pressed.\", e.target.value)\n      if (e.target.value.trim() !== '') {\n        sendMessage(e)\n      }\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        {messages && messages.map(m => <ChatMessage message={m} />)}\n      </div>\n      <input\n        size=\"50\"\n        value={msg}\n        onChange={handleOnChange}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Say something\"/>&nbsp;\n      <button onClick={sendMessage}><font size=\"5\">send</font></button>\n    </div >\n  )\n}\n\nfunction ChatMessage(props) {\n  const { user, body, uid, photoURL, createdAt } = props.message\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td rowSpan={2}>\n            <img width=\"60\" src={photoURL || 'https://i.imgur.com/rFbS5ms.png'} alt=\"{user}'s pfp\" />\n          </td>\n          <td><b><font class=\"bgcolor\" size=\"5\">{user}</font></b></td>\n        </tr>\n        <tr>\n          <td><b><font size=\"6\" color=\"blue\" face=\"Bradley Hand ITC\">{body}</font></b></td>\n        </tr>\n        <br></br>\n      </tbody>\n    </table >\n  )\n}\n\nfunction UserInfo(props) {\n  const { displayName, uid, photoURL } = auth.currentUser\n  return (\n    <div align=\"right\">\n    <table>\n      <tbody>\n        <tr>\n          <td rowSpan={2}>\n            <img width=\"40\" src={photoURL || 'https://i.imgur.com/rFbS5ms.png'} alt=\"{user}'s pfp\" />\n          </td>\n          <td><b>{displayName}</b></td>\n        </tr>\n        <br></br>\n      </tbody>\n    </table >\n    </div>\n  )\n}\n\nfunction SignOut() {\n  // if (auth.currentUser)\n  //   return (...)\n  // else\n  //   return ()\n  return auth.currentUser && (\n    <div align=\"right\">\n      <button onClick={() => auth.signOut()}><b><font color=\"red\" size=\"5\">Sign Out</font></b></button>\n    </div>\n  )\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <div>\n      <button onClick={signInWithGoogle}>\n        <img width=\"400\" src=\"google-sign-in-button.png\" alt=\"Sign in with Google\" />\n      </button>\n      <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\n\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}